name: cluster boostrap locally
on: fork

defautls:
  run:
    env:
      HOSTS_MAP_JSON: hosts_map.json
      OUTPUT_INVETORY_YAML: inventory.yml 
      ANSIBLE_INVENTORY_YAML: ansible/inventory/alma_cluster/inventory.yml

jobs:
  terraform-bootstrap:
    defaults:
      run:
        working-directory: terraform/clusters/proxmox
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform init
      run: terraform init

    - name: Terraform plan
      run: terraform plan -var-file=${TFVARS} -var="proxmox_token_id=${PROXMOX_TOKEN_ID}" -var="proxmox_token_secret=${PROXMOX_TOKEN_SECRET}"
      env:
        PROXMOX_TOKEN_SECRET: ${{ secrets.proxmox_token_secret }}
        PROXMOX_TOKEN_ID: ${{ secrets.proxmox_token_id }}

    - name: Terraform apply
      run: terraform apply --auto-approve -var-file=${TFVARS} -var="proxmox_token_id=${PROXMOX_TOKEN_ID}" -var="proxmox_token_secret=${PROXMOX_TOKEN_SECRET}"
      env:
        PROXMOX_TOKEN_SECRET: ${{ secrets.proxmox_token_secret }}
        PROXMOX_TOKEN_ID: ${{ secrets.proxmox_token_id }}

    - name: Terraform outputs
      run: |
        mkdir -p artifacts
        terraform output -json hosts_map > hosts_map.json
        echo ${HOSTS_MAP_JSON}
        cp $HOSTS_MAP_JSON artifacts/
        cp terraform.tfstate artifacts/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: config-files
        path: artifacts/

  ansible-bootstrap:
    needs: [terraform-bootstrap]
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: config-files

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Set up cache
      uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    
    - name: Run ansible
      run: |
       python scripts/create_invetory.py
       mv ${OUTPUT_INVETORY_YAML} ${ANSIBLE_INVENTORY_YAML}
       ansible-playbook site.yml --extra-vars "cluster_password=$CLUSTER_PASSWORD ansible_sudo_pass=$CLUSTER_PASSWORD"
      env:
        CLUSTER_PASSWORD: ${{ secrets.cluster_password }}



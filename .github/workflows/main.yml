name: cluster boostrap locally
on: fork

env:
  PROXMOX_TOKEN_SECRET: ${{ secrets.proxmox_token_secret }}
  PROXMOX_TOKEN_ID: ${{ secrets.proxmox_token_id }}
  HOSTS_MAP_JSON: hosts_map.json
  OUTPUT_INVETORY_YAML: inventory.yml
  ANSIBLE_INVENTORY_YAML: ansible/inventory/alma_cluster/inventory.yml
  CLUSTER_PASSWORD: ${{ secrets.cluster_password }}

jobs:
  terraform-bootstrap:
    defaults:
      run:
        working-directory: terraform/clusters/proxmox
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
        AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}

    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.terraform-output.hostsmap }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.aws_access_key }}
        aws-secret-access-key: ${{ secrets.aws_secret_key }}
        aws-region: us-east-1

    - uses: hashicorp/setup-terraform@v3

    - name: Terraform init
      run: terraform init

    - name: Terraform plan
      run: terraform plan -var-file=${TFVARS} -var="proxmox_token_id=${PROXMOX_TOKEN_ID}" -var="proxmox_token_secret=${PROXMOX_TOKEN_SECRET}"

    - name: Terraform apply
      run: terraform apply --auto-approve -var-file=${TFVARS} -var="proxmox_token_id=${PROXMOX_TOKEN_ID}" -var="proxmox_token_secret=${PROXMOX_TOKEN_SECRET}"

    - name: Terraform outputs
      id: terraform-output
      run: |
        outputs=$(terraform output -json hosts_map)
        echo "hostsmap=$outputs" >> "$GITHUB_OUTPUT"
  create-inventory-file:
    needs: [terraform-bootstrap]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: write hosts
      run: |
        echo $OUTPUT1 >> ${HOSTS_MAP_JSON}
      env:
        OUTPUT1: ${{needs.terraform-bootstrap.outputs.output1}}
        OUTPUT2: ${{needs.terraform-bootstrap.outputs.output2}}

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Set up cache
      uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install

    - name: Run inventory script
      run: poetry run create-inventory-yaml